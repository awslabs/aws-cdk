import * as iam from '@aws-cdk/aws-iam';
import * as cdk from '@aws-cdk/core';
import { CfnVPCPeeringConnection } from './ec2.generated';
import { IVpc } from './vpc';

/**
 * VPC with which you are creating the VPC peering connection.
 */
export class PeerVpc {
  constructor(
    /**
     * The ID of the VPC with which you are creating the VPC peering connection
     */
    public readonly vpcId: string,

    /**
     * The Region code for the accepter VPC
     *
     * @default - The Region in which you make the request
     */
    public readonly region?: string,

    /**
     * The AWS account ID of the owner of the accepter VPC
     *
     * @default - Your AWS account ID
     */
    public readonly account?: string,
  ) {}
}

/**
 * Options for constructing VpcPeeringConnection
 */
export interface VpcPeeringConnectionOptions {
  /**
   * The name of VPC peering connections
   *
   * @default - generated by CloudFormation
   */
  readonly vpcPeeringConnectionName?: string

  /**
   * VPC with which you are creating the VPC peering connection.
   */
  readonly peerVpc: PeerVpc

  /**
   * The role, which is required when you are peering a VPC in a different AWS account.
   *
   * @default - conditional
   */
  readonly role?: iam.IRole
}

/**
 * Props for constructing VpcPeeringConnection
 */
export interface VpcPeeringConnectionProps extends VpcPeeringConnectionOptions {
  /**
   * The requester VPC that you own
   */
  readonly vpc: IVpc
}

/**
 * VPC peering connection between two VPC
 */
export interface IVpcPeeringConnection extends cdk.IResource {
  /**
   * The ID of the VPC peering connection.
   *
   * @attribute
   */
  readonly vpcPeeringConnectionId: string
}

/**
 * Attributes of VPC peering connection
 */
export interface VpcPeeringConnectionAttributes {
  /**
   * The ID of the VPC peering connection.
   */
  readonly vpcPeeringConnectionId: string
}

/**
 * VPC peering connection between two VPC
 */
export class VpcPeeringConnection extends cdk.Resource implements IVpcPeeringConnection {
  /**
   * Import a VPC peering connection from attributes
   */
  public static fromVpcPeeringConnectionAttributes(scope: cdk.Construct, id: string, attrs: VpcPeeringConnectionAttributes): IVpcPeeringConnection {
    class Import extends cdk.Resource implements IVpcPeeringConnection {
      public readonly vpcPeeringConnectionId: string = attrs.vpcPeeringConnectionId
    }
    return new Import(scope, id);
  }

  /**
   * The ID of the VPC peering connection.
   *
   * @attribute
   */
  public readonly vpcPeeringConnectionId: string

  constructor(scope: cdk.Construct, id: string, props: VpcPeeringConnectionProps) {
    super(scope, id);

    if (props.peerVpc?.account && !props.role) {
      throw new Error('The role is required when you are peering a VPC in a different AWS account.');
    }

    const tags: cdk.CfnTag[] = [];
    if (props.vpcPeeringConnectionName) {
      tags.push({ key: 'Name', value: props.vpcPeeringConnectionName });
    }

    const resource = new CfnVPCPeeringConnection(this, 'Resource', {
      vpcId: props.vpc.vpcId,
      peerVpcId: props.peerVpc.vpcId,
      peerRegion: props.peerVpc.region || this.stack.region,
      peerOwnerId: props.peerVpc.account || this.stack.account,
      peerRoleArn: props.role?.roleArn,
      tags,
    });

    this.vpcPeeringConnectionId = resource.ref;
  }
}
